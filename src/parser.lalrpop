use std::rc::Rc;
use std::cell::RefCell;
use crate::ssa::isa::IntrinsicType;
use crate::ast::*;
use crate::lexer;
use crate::compiler;

grammar;

pub Top : Program = {
    NL* <TopLevelExpr*> EOF? => Program{ exprs: <> },
};

#[inline]
Comma<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

// Expressions
StatementEnd: () = {
    NL+ => (),
    ";"+ => (),
};
StatementEndOrEOF: () = {
    StatementEnd => (),
    EOF => (),
};
TopLevelExpr = {
    <ImportStatement> StatementEndOrEOF,
    <DefStatement> StatementEndOrEOF,
    <ExternDefStatement> StatementEndOrEOF,
    <Expr>,
};
Expr = <StandaloneExpr> StatementEndOrEOF;
StandaloneExpr = {
    <BreakExpr>,
    <ReturnExpr>
};

// Break expression
BreakExpr: NodeBox = {
    <start:@L> "break" <end:@L> => {
        NodeBox::new(BreakExpr {}, (start, end))
    }
};

// Attributes
AttributeList: Vec<AttributeValue> = {
    <items:(<AttributeValue> NL)+> => {
        items
    }
}

AttributeValue: AttributeValue = {
    "@[" <name:Identifier> "]" => {
        AttributeValue {
            name,
            args: vec![],
        }
    },
    "@[" <name:Identifier> "(" <args:Comma<Identifier>> ")" "]" => {
        AttributeValue {
            name,
            args,
        }
    },
}

// Imports
ImportStatement: NodeBox = {
    <start:@L> "import" <path:String> <end:@L> => {
        NodeBox::new(ImportStatement {
            path
        }, (start, end))
    }
};

// Function definitions
DefStatement: NodeBox = {
    <start:@L> <attrs:AttributeList?> "def"
        <id:Identifier>
        <args:DefArgumentList?>
        <return_type:TypeSpecifier?>
    StatementEnd <exprs:Expr*> "end" <end:@L> => {
        NodeBox::new(DefStatement {
            id: Rc::from(id),
            args: args.unwrap_or_else(|| vec![]),
            exprs,
            return_type,
            attrs,
            intrinsic: RefCell::new(IntrinsicType::None)
        }, (start, end))
    },
};

DefArgumentList: Vec<DefArgument> = {
    "(" <args:Comma<DefArgument>> ")" => args
};

DefArgument: DefArgument = {
    <maybe_mut:"mut"?> <id:Identifier> <type_specifier:TypeSpecifier?> => {
        DefArgument {
            name: Rc::from(id),
            type_id: type_specifier,
            is_mut: maybe_mut.is_some(),
        }
    },
};

ExternDefStatement: NodeBox = {
    <start:@L> "extern" "def"
        <id:Identifier>
        <symbol:ExternSymbol?>
        <args:DefArgumentList?>
        <return_type:TypeSpecifier?>
    <end:@L>  => {
        NodeBox::new(DefStatement {
            id: Rc::from(id.clone()),
            args: args.unwrap(),
            exprs: vec![],
            return_type: Some(return_type.unwrap()),
            attrs: None,
            intrinsic: RefCell::new(IntrinsicType::Extern(symbol.unwrap_or(id)))
        }, (start, end))
    },
};

ExternSymbol: String = "=" <String>;

// Return expression
ReturnExpr: NodeBox = {
    <start:@L> "return" <expr:StandaloneExpr> <end:@L>  => {
        NodeBox::new(ReturnExpr { expr }, (start, end))
    },
    LetExpr,
};

// Let expression
LetExpr: NodeBox = {
    <start:@L> <maybe_mut:"mut"?> <left:Term> ":" <typed:Type?> "=" <right:StandaloneExpr> <end:@L> => {
        NodeBox::new(LetExpr{ left, right, typed, is_mut: maybe_mut.is_some() }, (start, end))
    },
    BinExpr,
};

// Binary expressions
BinOpTier<Op,NextTier>: NodeBox = {
    <start:@L>
        <left:BinOpTier<Op,NextTier>> <op:Op> <right:NextTier>
    <end:@L> => NodeBox::new(BinExpr{ left, right, op }, (start, end)),
    NextTier
};

BinExpr = AsgExpr;
AsgExpr = BinOpTier<AsgOp, AndExpr>;
AndExpr = BinOpTier<AndOp, OrzExpr>;
OrzExpr = BinOpTier<OrzOp, CmpExpr>;
CmpExpr = BinOpTier<CmpOp, AddExpr>;
AddExpr = BinOpTier<AddOp, FacExpr>;
FacExpr = BinOpTier<FacOp, AsExpr>;

AsgOp: BinOp = {
    "=" => BinOp::Asg,
    "+=" => BinOp::Adds,
    "-=" => BinOp::Subs,
    "*=" => BinOp::Muls,
    "/=" => BinOp::Divs,
    "%=" => BinOp::Mods,
};

AndOp: BinOp = {
    "and" => BinOp::And,
};

OrzOp: BinOp = {
    "or" => BinOp::Or,
};

CmpOp: BinOp = {
    "==" => BinOp::Equ,
    "!=" => BinOp::Neq,
    "<"  => BinOp::Lt,
    ">"  => BinOp::Gt,
    "<=" => BinOp::Lte,
    ">=" => BinOp::Gte,
};

AddOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

FacOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
    "%" => BinOp::Mod,
};

// As cast expression
AsExpr: NodeBox = {
    <start:@L> <left:WhileExpr> "as" <typed:Type> <end:@L> => {
        NodeBox::new(AsExpr {
            left,
            typed
        }, (start, end))
    },
    WhileExpr,
};

// While expression
WhileExpr: NodeBox = {
    <start:@L> "while" <cond:StandaloneExpr> StatementEnd <exprs:Expr*> "end" <end:@L> => {
        NodeBox::new(WhileExpr { cond, exprs }, (start, end))
    },
    <start:@L> "while" <cond:StandaloneExpr> "then" <expr:Expr> <end:@L> => {
        NodeBox::new(WhileExpr { cond, exprs: vec![expr] }, (start, end))
    },
    IfExpr
};

// If expression
IfExpr: NodeBox = {
    <start:@L> 
        "if" <cond:StandaloneExpr> StatementEnd <exprs:Expr*> <elsif:IfExprElsif*> <elses:IfExprElse?> "end"
    <end:@L> => {
        let span = (start, end);
        if !elsif.is_empty() {
            let last_elsif = elsif.last().unwrap();
            let mut elsif_expr = NodeBox::new(IfExpr {
                cond: last_elsif.0.clone(),
                exprs: last_elsif.1.clone(),
                elses: elses.unwrap_or_else(|| vec![])
            }, span);
            for it_elsif in elsif.iter().rev().skip(1) {
                elsif_expr = NodeBox::new(IfExpr {
                    cond: it_elsif.0.clone(),
                    exprs: it_elsif.1.clone(),
                    elses: vec![ elsif_expr ],
                }, span);
            }
            return NodeBox::new(IfExpr { cond, exprs, elses: vec![ elsif_expr ] }, span);
        }
        NodeBox::new(IfExpr { cond, exprs, elses: elses.unwrap_or_else(|| vec![]) }, span)
    },
    <start:@L> 
        "if" <cond:StandaloneExpr> "then" <expr:Expr>
    <end:@L> => {
        NodeBox::new(IfExpr { cond, exprs, elses: vec![expr] }, span)
    }
    CallExpr,
};

IfExprElsif: (NodeBox, Vec<NodeBox>) = {
    "elsif" <cond:StandaloneExpr> StatementEnd <exprs:Expr*> => {
        (cond, exprs)
    },
};
IfExprElse: Vec<NodeBox> = "else" StatementEnd <Expr*>;

// Call expression
CallExpr: NodeBox = {
    <start:@L> 
        <callee:MemberExpr> "(" <args:Comma<StandaloneExpr>> ")"
    <end:@L> => {
        NodeBox::new(CallExpr::new(callee, args), (start, end))
    },
    MemberExpr,
};

// Member expressions
MemberExpr: NodeBox = {
    <start:@L> <first:Term> <rest: MemberExprArm+> <end:@L> => {
        let span = (start, end);
        let mut memexpr = NodeBox::new(MemberExpr {
            left: first,
            right: rest[0].clone(),
        }, span);
        for right in rest.iter().skip(1) {
            let span = memexpr.span();
            memexpr = NodeBox::new(MemberExpr {
                left: memexpr,
                right: right.clone(),
            }, span);
        }
        memexpr
    },
    Term,
};

MemberExprArm: MemberExprArm = {
    "." <id:Identifier> => MemberExprArm::Identifier(Rc::from(id)),
    "[" <expr:StandaloneExpr> "]" => MemberExprArm::Index(expr),
};

// Literals / terms
Term: NodeBox = {
    <start:@L> <lit:Literal> <end:@L> => NodeBox::new(lit, (start, end)),
    "(" <StandaloneExpr> ")" => <>,
};

Literal: Value = {
    <I32> => Value::I32(<>),
    <I64> => Value::I64(<>),
    <ISize> => Value::ISize(<>),
    <Float> => Value::Float(<>),
    <String> => Value::String(Rc::from(<>)),
    <Identifier> => Value::Identifier(Rc::from(<>)),
    <AtIdentifier> => Value::Identifier(Rc::from(<>)),
    "true" => Value::Bool(true),
    "false" => Value::Bool(false),
    "uninitialized" => Value::Uninitialized,
    "[" <values:Comma<StandaloneExpr>> "]" => Value::Slice(values),
};

// Types
Type: TypeId = {
    <data:TypePointer> => TypeId::new(data),
};

TypePointer: TypeIdData = {
    "&" <first:Type> => {
        TypeIdData::Pointer {
            typed: Box::new(first.clone()),
            pointer_tag: PointerTag::Immutable,
        }
    },
    "&" <pointer_tag:TypePointerTag> <first:Type> => {
        TypeIdData::Pointer {
            typed: Box::new(first.clone()),
            pointer_tag,
        }
    },
    TypeSlice,
};

TypePointerTag: PointerTag = {
    "mut" => PointerTag::Mutable,
};

TypeSlice: TypeIdData = {
    "[" <typed:Type> <length:(";" <I32>)?> "]" => {
        TypeIdData::Slice {
            typed: Box::new(typed.clone()),
            length: length.map(|length| length as u32)
        }
    },
    TypeIdentifier,
};

TypeIdentifier: TypeIdData = {
    <CapitalIdentifier> => TypeIdData::Identifier(Rc::from(<>)),
};

TypeSpecifier: TypeId = {
    ":" <Type> => <>,
};


// Hook external lexer:
extern {
    type Location = usize;
    type Error = compiler::Error;

    enum lexer::Tok {
        "import" => lexer::Tok::Import,
        "def" => lexer::Tok::Def,
        "extern" => lexer::Tok::Extern,
        "return" => lexer::Tok::Return,
        "if" => lexer::Tok::If,
        "while" => lexer::Tok::While,
        "else" => lexer::Tok::Else,
        "elsif" => lexer::Tok::Elsif,
        "end" => lexer::Tok::End,
        "then" => lexer::Tok::Then,
        "break" => lexer::Tok::Break,
        "and" => lexer::Tok::And,
        "or" => lexer::Tok::Or,
        "as" => lexer::Tok::As,
        "mut" => lexer::Tok::Mut,
        "true" => lexer::Tok::True,
        "false" => lexer::Tok::False,
        "uninitialized" => lexer::Tok::Uninitialized,
        "==" => lexer::Tok::Equ,
        "!=" => lexer::Tok::Neq,
        "+" => lexer::Tok::Add,
        "-" => lexer::Tok::Sub,
        "*" => lexer::Tok::Mul,
        "/" => lexer::Tok::Div,
        "%" => lexer::Tok::Mod,
        "=" => lexer::Tok::Asg,
        "+=" => lexer::Tok::Adds,
        "-=" => lexer::Tok::Subs,
        "*=" => lexer::Tok::Muls,
        "/=" => lexer::Tok::Divs,
        "%=" => lexer::Tok::Mods,
        "<" => lexer::Tok::Lt,
        ">" => lexer::Tok::Gt,
        "<=" => lexer::Tok::Lte,
        ">=" => lexer::Tok::Gte,
        "(" => lexer::Tok::LeftParen,
        ")" => lexer::Tok::RightParen,
        "," => lexer::Tok::Comma,
        "." => lexer::Tok::Dot,
        ":" => lexer::Tok::Colon,
        ";" => lexer::Tok::Semicolon,
        "&" => lexer::Tok::Amp,
        "@" => lexer::Tok::At,
        "@[" => lexer::Tok::AtBracket,
        "[" => lexer::Tok::LeftBracket,
        "]" => lexer::Tok::RightBracket,
        NL => lexer::Tok::Newline,
        EOF => lexer::Tok::EOF,
        I32 => lexer::Tok::I32 { value : <i32> },
        I64 => lexer::Tok::I64 { value : <i64> },
        ISize => lexer::Tok::ISize { value : <i64> },
        Float => lexer::Tok::Float { value : <u64> },
        Identifier => lexer::Tok::Identifier { value : <String> },
        AtIdentifier => lexer::Tok::AtIdentifier { value : <String> },
        CapitalIdentifier => lexer::Tok::CapitalIdentifier { value : <String> },
        String => lexer::Tok::String { value : <String> },
    }
}